# IoTServer
services:
# Infras
  emqx:
    restart: always
    image: emqx:5.4.1
    pull_policy: missing
    ports:
    - 1883:1883
    - 18083:18083
    volumes:
    - D:\gw\data\emqx:/opt/emqx/data
    - D:\gw\etc\emqx:/opt/emqx/etc
    - D:\gw\log\emqx:/opt/emqx/log
  redis:
    restart: always
    image: redis:alpine
    pull_policy: missing
    ports:
    - 6379:6379
    volumes:
     - D:\gw\data\redis:/data
    deploy:
      resources:
        reservations:
          memory: 1G
  influxdb:
    restart: always
    image: influxdb:2.7-alpine
    pull_policy: missing
    environment:
    - DOCKER_INFLUXDB_INIT_MODE=${INFLUXDB_MODE}
    - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME}
    - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
    - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
    - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
    - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_ADMIN_TOKEN}
    - INFLUXDB_URL=${INFLUXDB_URL}
    volumes:
      - D:\gw\data\influxdb:/var/lib/influxdb2:rw
  telegraf:
    restart: always
    image: telegraf:1.30-alpine
    pull_policy: missing
    depends_on:
      - influxdb
    environment:
    - DOCKER_INFLUXDB_INIT_MODE=${INFLUXDB_MODE}
    - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME}
    - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
    - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
    - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
    - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_ADMIN_TOKEN}
    - INFLUXDB_URL=${INFLUXDB_URL}
    volumes:
      - D:\gw\configs\influxdb\telegraf\mytelegraf.conf:/etc/telegraf/telegraf.conf:ro
  nginx:
    restart: always
    image: openresty/openresty:1.21.4.1-0-alpine
    ports:
    - 80:80
    depends_on:
    - gateway-svc
    - files-svc
    - web-svc
    - com2scada-svc
    volumes:
    - D:\gw\configs\frontend\Image:/var/www/html/image
    - D:\gw\configs\nginx\sites-enabled:/etc/nginx/conf.d
    - D:\gw\configs\nginx\nginx.conf:/etc/nginx/nginx.conf
# Server Components
  files-svc:
    restart: always
    image: asia-east1-docker.pkg.dev/muulin-universal/ml-iotsrv/files:v2.0.0
    volumes:
    - D:\gw\data\reports\report:/reports
  gateway-svc:
    restart: always
    image: asia-east1-docker.pkg.dev/muulin-universal/ml-iotsrv/gateway:dev
    pull_policy: missing
    depends_on:
    - layout-svc
    - auth-svc
    - schedule-svc
    - queue-svc
    - com2scada-svc
    - event-svc
    - rubase-alert-svc
  auth-svc:
    restart: always
    image: asia-east1-docker.pkg.dev/muulin-universal/ml-iotsrv/auth:v2.0.0
    environment:
    - S6_KEEP_ENV=1
    - SERVICE=auth
    - USAGE=scada
    - Auth_Code=42697846
    - CONFIG_FILE=/etc/config.yml
    - LOG_LEVEL=${LOG_LEVEL}
    - LOG_TARGET=${LOG_TARGET}
    - GRPC_PORT=${GRPC_PORT}
    - GRPC_REFLECT=${GRPC_REFLECT}
    - GRPC_EVENT_ADDRESS=${GRPC_EVENT_ADDRESS}
    - API_PORT=${API_PORT}
    - API_DEBUG=${IS_DEBUG}
    - MOCK_AUTH=${MOCK_AUTH}
    - GIN_MODE=${GIN_MODE}
    - TRUSTED_PROXIES=${TRUSTED_PROXIES}
    volumes:
    - D:\gw\data\sql/:/sql/
    - D:\gw\configs\conf\config.yml:/etc/config.yml
    - D:\gw\configs\conf\cert:/cert
  schedule-svc:
    restart: always
    image: asia-east1-docker.pkg.dev/muulin-universal/ml-iotsrv/schedule:v2.0.0
    depends_on:
    - auth-svc
    environment:
    - S6_KEEP_ENV=1
    - SERVICE=schedule
    - CONFIG_FILE=/etc/config.yml
    - CACHE_DB=schedule
    - LOG_LEVEL=${LOG_LEVEL}
    - LOG_TARGET=${LOG_TARGET}
    - SCM_CONF_PATH=/etc/scm/
    - REFRESH_HOUR=17
    - REFRESH_MIN=32
    - GIN_MODE=${GIN_MODE}
    - API_PORT=${API_PORT}
    - MOCK_AUTH=${MOCK_AUTH}
    - API_DEBUG=${IS_DEBUG}
    - TRUSTED_PROXIES=${TRUSTED_PROXIES}
    - DISPLAY_PROC_ACTS=true
    - GRPC_PORT=${GRPC_PORT}
    - GRPC_REFLECT=${GRPC_REFLECT}
    - GRPC_Auth_Address=${GRPC_AUTH_ADDRESS}
    - GRPC_COMMUNICATE_ADDRESS=${GRPC_COMMUNICATE_ADDRESS}
    volumes:
    - D:\gw\configs\conf\scm/:/etc/scm/
    - D:\gw\configs\conf\config.yml:/etc/config.yml
  layout-svc:
    restart: always
    image: asia-east1-docker.pkg.dev/muulin-universal/ml-iotgw/layout:v2.0.0
    environment:
    - SERVICE=scada_layout
    - CONFIG_FILE=/etc/config.yml
    - DOWNLOAD_CONF_DIR=/frontend/
    - GRPC_AUTH_ADDRESS=${GRPC_AUTH_ADDRESS}
    - GRPC_COMMUNICATE_ADDRESS=${GRPC_COMMUNICATE_ADDRESS}
    - GRPC_PORT=${GRPC_PORT}
    - GRPC_REFLECT=${GRPC_REFLECT}
    - LOG_LEVEL=${LOG_LEVEL}
    - LOG_TARGET=${LOG_TARGET}
    - TV_MODE_ONLY=false
    - COMM_TIME_OUT_DURATION=2.5s
    - STATIC_IMAGE_PATH=/image
    - GIN_MODE=${GIN_MODE}
    - MOCK_AUTH=${MOCK_AUTH}
    - API_DEBUG=${IS_DEBUG}
    - API_PORT=${API_PORT}
    - TRUSTED_PROXIES=*
    volumes:
    - D:\gw\configs\frontend:/frontend
    - D:\gw\configs\conf\config.yml:/etc/config.yml
  com2scada-svc:
    restart: always
    image: asia-east1-docker.pkg.dev/muulin-universal/ml-iotsrv/com2scada:v2.0.0
    depends_on:
    - auth-svc
    - layout-svc
    environment:
    - SERVICE=com2scada
    - CHECK_CYCLE=3m
    - CONFIG_FILE=/etc/config.yml
    - LOG_LEVEL=${LOG_LEVEL}
    - LOG_TARGET=${LOG_TARGET}
    - GRPC_PORT=${GRPC_PORT}
    - GRPC_REFLECT=${GRPC_REFLECT}
    - TOPIC_ROUTINE=${TOPIC_ROUTINE_DATA}
    - TOPIC_CHANGE_DATA=${TOPIC_CHANGE_DATA}
    - TOPIC_CONNECT_ERR=${TOPIC_CONNECT_ERR}
    - TOPIC_WRITE_DATA=${TOPIC_WRITE_DATA}
    - MQTT_BrokerURL=${MQTT_BrokerURL}
    - MQTT_ClientID=com2scada
    - MQTT_Qos=1
    - MQTT_KeepAlive=30
    - MQTT_ConnectRetryDelay=500
    - MQTT_Debug=${IS_DEBUG}
    - MQTT_IsAuth=true
    - MQTT_User=${MQTT_User}
    - MQTT_Password=${MQTT_Password}
    - MQTT_QueuePath=/etc/queue/local
    - MQTT_Gzip=${MQTT_Gzip}
    - GIN_MODE=${GIN_MODE}
    - API_PORT=${API_PORT}
    - MOCK_AUTH=${MOCK_AUTH}
    - API_DEBUG=${IS_DEBUG}
    - TRUSTED_PROXIES=${TRUSTED_PROXIES}
    - GRPC_Auth_Address=${GRPC_AUTH_ADDRESS}
    - GRPC_LAYOUT_ADDRESS=${GRPC_LAYOUT_ADDRESS}
    - GRPC_COMMUNICATE_ADDRESS=${GRPC_COMMUNICATE_ADDRESS}
    - GRPC_EVENT_ADDRESS=${GRPC_EVENT_ADDRESS}
    volumes:
    - D:\gw\configs\conf\config.yml:/etc/config.yml
  mbproxy-svc:
    image: asia-east1-docker.pkg.dev/muulin-universal/ml-iotgw/mbproxy:v2.0.0
    depends_on:
    - com2scada-svc
    - event-svc
    environment:
    - LOG_LEVEL=${LOG_LEVEL}
    - LOG_TARGET=${LOG_TARGET}
    - SERVICE=mbproxy
    - CONFIG_FILE=/etc/config.yml
    - PROXY_CONF=/etc/proxies.yml
    - GRPC_COM2SCADA_ADDRESS=${GRPC_COM2SCADA_ADDRESS}
    - GRPC_EVENT_ADDRESS=${GRPC_EVENT_ADDRESS}
    - GRPC_COMMUNICATE_ADDRESS=${GRPC_COMMUNICATE_ADDRESS}
    volumes:
    - D:\gw\configs\conf\config.yml:/etc/config.yml
    - D:\gw\configs\backend\Proxy\proxies.yml:/etc/proxies.yml
    ports:
    - 502:502
  queue-svc:
    restart: always
    image: asia-east1-docker.pkg.dev/muulin-universal/ml-iotsrv/queue:v2.0.0
    environment:
    - SERVICE=scada-queue
    - QUEUE_PATH=/etc/que/
    - CONFIG_FILE=/etc/config.yml
    - GIN_MODE=${GIN_MODE}
    - API_PORT=${API_PORT}
    - MOCK_AUTH=${MOCK_AUTH}
    - API_DEBUG=${IS_DEBUG}
    - TRUSTED_PROXIES=${TRUSTED_PROXIES}
    - GRPC_Auth_Address=${GRPC_AUTH_ADDRESS}
    - GRPC_COMMUNICATE_ADDRESS=${GRPC_COMMUNICATE_ADDRESS}
    - GRPC_LAYOUT_ADDRESS=${GRPC_LAYOUT_ADDRESS}
    volumes:
    - D:\gw\configs\conf\config.yml:/etc/config.yml
    - D:\gw\data\que:/etc/que
  report-svc:
    restart: always
    image: asia-east1-docker.pkg.dev/muulin-universal/ml-iotsrv/report:v2.0.0
    environment:
    - SERVICE=scada-report
    - USAGE=scada
    - CONFIG_FILE=/etc/config.yml
    - RESOURCE_PATH=/rsrc/
    - GIN_MODE=${GIN_MODE}
    - API_PORT=${API_PORT}
    - MOCK_AUTH=${MOCK_AUTH}
    - API_DEBUG=${IS_DEBUG}
    - TRUSTED_PROXIES=${TRUSTED_PROXIES}
    - GRPC_Auth_Address=${GRPC_AUTH_ADDRESS}
    - GRPC_LAYOUT_ADDRESS=${GRPC_LAYOUT_ADDRESS}
    - DIR=/etc/reports/
    - GRPC_PORT=${GRPC_PORT}
    - GRPC_REFLECT=${GRPC_REFLECT}
    volumes:
    - D:\gw\configs\conf\config.yml:/etc/config.yml
    - D:\gw\data\reports:/etc/reports
  event-svc:
    restart: always
    image: asia-east1-docker.pkg.dev/muulin-universal/ml-iotsrv/event:v2.0.0
    depends_on:
    - auth-svc
    environment:
    - SERVICE=event
    - LOG_LEVEL=${LOG_LEVEL}
    - LOG_TARGET=${LOG_TARGET}
    - CONFIG_FILE=/etc/config.yml
    - GIN_MODE=${GIN_MODE}
    - API_PORT=${API_PORT}
    - MOCK_AUTH=false
    - API_DEBUG=${IS_DEBUG}
    - TRUSTED_PROXIES=${TRUSTED_PROXIES}
    - GRPC_PORT=${GRPC_PORT}
    - GRPC_REFLECT=${GRPC_REFLECT}
    - WARN_CACHE_DURATION=-1s
    - GRPC_Auth_Address=${GRPC_AUTH_ADDRESS}
    volumes:
    - D:\gw\configs\conf\config.yml:/etc/config.yml
    - D:\gw\data\sql:/sql
  rubase-alert-svc:
    restart: always
    image: asia-east1-docker.pkg.dev/muulin-universal/ml-iotsrv/rubase:v2.0.0
    depends_on:
    - auth-svc
    - event-svc
    - report-svc
    - com2scada-svc
    environment:
    - USAGE=scada
    - LOG_LEVEL=${LOG_LEVEL}
    - LOG_TARGET=${LOG_TARGET}
    - SERVICE=rubase_alert
    - CONFIG_FILE=/etc/config.yml
    - CHECK_CYCLE=1m
    - ALERT_CONFIG_PATH=/etc/rubase/
    - GIN_MODE=${GIN_MODE}
    - API_PORT=${API_PORT}
    - MOCK_AUTH=false
    - API_DEBUG=${IS_DEBUG}
    - TRUSTED_PROXIES=${TRUSTED_PROXIES}
    - GRPC_PORT=${GRPC_PORT}
    - GRPC_REFLECT=${GRPC_REFLECT}
    - GRPC_Auth_Address=${GRPC_AUTH_ADDRESS}
    - GRPC_COM2SCADA_ADDRESS=${GRPC_COM2SCADA_ADDRESS}
    - GRPC_REPORT_ADDRESS=${GRPC_REPORT_ADDRESS}
    - GRPC_EVENT_ADDRESS=${GRPC_EVENT_ADDRESS}
    volumes:
    - D:\gw\configs\conf\config.yml:/etc/config.yml
    - D:\gw\data\rubase:/etc/rubase
  alarm-svc:
    restart: always
    image: asia-east1-docker.pkg.dev/muulin-universal/ml-iotsrv/alarm:v2.0.0
    depends_on:
    - auth-svc
    - event-svc
    - layout-svc
    environment:
    - USAGE=scada
    - LOG_LEVEL=${LOG_LEVEL}
    - LOG_TARGET=${LOG_TARGET}
    - SERVICE=alarm
    - CONFIG_FILE=/etc/config.yml
    - GRPC_COM2SCADA_ADDRESS=${GRPC_COM2SCADA_ADDRESS}
    - GRPC_LAYOUT_ADDRESS=${GRPC_LAYOUT_ADDRESS}
    - GRPC_EVENT_ADDRESS=${GRPC_EVENT_ADDRESS}
    volumes:
    - D:\gw\configs\conf\config.yml:/etc/config.yml
  ems-svc:
    restart: always
    image: asia-east1-docker.pkg.dev/muulin-universal/ml-iotsrv/elec-demand:v2.0.0
    environment:
    - USAGE=scada
    - LOG_LEVEL=${LOG_LEVEL}
    - LOG_TARGET=${LOG_TARGET}
    - SERVICE=electricity-demand
    - CONFIG_FILE=/etc/config.yml
    - EMS_CONFIG_PATH=/scada/ems
    - GRPC_Auth_Address=${GRPC_AUTH_ADDRESS}
    - GRPC_COMMUNICATE_ADDRESS=${GRPC_COMMUNICATE_ADDRESS}
    - GRPC_COM2SCADA_ADDRESS=${GRPC_COM2SCADA_ADDRESS}
    - GRPC_REPORT_ADDRESS=${GRPC_REPORT_ADDRESS}
    - GRPC_LAYOUT_ADDRESS=${GRPC_LAYOUT_ADDRESS}
    - GRPC_EVENT_ADDRESS=${GRPC_EVENT_ADDRESS}
    - INFLUXDB_INIT_FILE=/elec/influxdb_init.yml
    - INFLUXDB_BUCKET=electricity-demand
    - INFLUXDB_REPORT_BUCKET=electricity-demand-report
    - INFLUXDB_MEASUREMENT=use-electricity
    - API_PORT=${API_PORT}
    - API_DEBUG=${API_DEBUG}
    - MOCK_AUTH=false
    - GIN_MODE=${GIN_MODE}
    - TRUSTED_PROXIES=${TRUSTED_PROXIES}
    volumes:
    - D:\gw\configs\conf\config.yml:/etc/config.yml
    - D:\gw\configs\conf\elec\influxdb_init.yml:/elec/influxdb_init.yml
    - D:\gw\data\ems:/scada/ems
  web-svc:
    restart: always
    image: asia-east1-docker.pkg.dev/muulin-universal/ml-iotsrv/web:v2.0.0
    pull_policy: missing
    environment:
    - VITE_SSE_URL=${HOST_URL}
    - VITE_API_HOST=${HOST_URL}/web
    - VITE_LAYOUT_URL=${HOST_URL}/web/layout/tv
  tvsse-svc:
    restart: always
    image: asia-east1-docker.pkg.dev/muulin-universal/ml-iotgw/tvsse:v2.0.0
    pull_policy: missing
    environment:
    - SERVICE=scada-tv-sse
    - CONFIG_FILE=/etc/config.yml
    - GRPC_PORT=${GRPC_PORT}
    - GRPC_REFLECT=${GRPC_REFLECT}
    - TOPIC_CHANGE_DATA=${TOPIC_CHANGE_DATA}
    - GRPC_LAYOUT_ADDRESS=${GRPC_LAYOUT_ADDRESS}
    - MQTT_BrokerURL=${MQTT_BrokerURL}
    - MQTT_ClientID=scada_tv
    - MQTT_Qos=${MQTT_Qos}
    - MQTT_KeepAlive=${MQTT_KeepAlive}
    - MQTT_ConnectRetryDelay=${MQTT_ConnectRetryDelay}
    - MQTT_Debug=false
    - MQTT_IsAuth=${MQTT_IsAuth}
    - MQTT_User=${MQTT_User}
    - MQTT_Password=${MQTT_Password}
    - MQTT_QueuePath=${MQTT_QueuePath}
    - MQTT_Gzip=${MQTT_Gzip}
    - GIN_MODE=${GIN_MODE}
    - API_PORT=${API_PORT}
    - MOCK_AUTH=${MOCK_AUTH}
    - API_DEBUG=${API_DEBUG}
    - TRUSTED_PROXIES=*
    - LOG_LEVEL=${LOG_LEVEL}
    - LOG_TARGET=${LOG_TARGET}
    volumes:
    - D:\gw\configs\conf\config.yml:/etc/config.yml
    - D:\gw\data\tvsse:/scada/data/queue
  config-watcher:
    restart: always
    image: asia-east1-docker.pkg.dev/muulin-universal/ml-iotgw/configwatcher:v2.0.0
    pull_policy: missing
    environment:
     - MQTT_BrokerURL=${MQTT_BrokerURL}
     - RESTART_TOPIC=com/config-sync/restart
  config-sync:
    restart: always
    image: asia-east1-docker.pkg.dev/muulin-universal/ml-iotgw/config-sync:v2.0.0
    pull_policy: missing
    environment:
      - environment=${environment}
      - CONFIGURATION_TOKEN=${CONFIGURATION_TOKEN}
      - VERSION_CONFIG_PATH=/scada/data/store
      - MAX_FILE_COUNT=10
      - GRPC_CONFIGURATION_ADDRESS=rpc.hvac-cloud.org:81
      - SERVICE=config-sync
      - CONFIG_FILE=/scada/conf/config.yml
      - LOG_LEVEL=debug
      - LOG_TARGET=os
      - MQTT_BrokerURL=${MQTT_BrokerURL}
      - MQTT_ClientID=config-sync
      - MQTT_Qos=2
      - MQTT_Topic=mock_topic
      - MQTT_KeepAlive=${MQTT_KeepAlive}
      - MQTT_ConnectRetryDelay=${MQTT_ConnectRetryDelay}
      - MQTT_Group=scada
      - MQTT_Debug=${MQTT_Debug}
      - MQTT_IsAuth=${MQTT_IsAuth}
      - MQTT_User=${MQTT_User}
      - MQTT_Password=${MQTT_Password}
      - MQTT_QueuePath=/scada/data/queue
      - MQTT_Gzip=${MQTT_Gzip}
      - FRONTEND_CONFIG_PATH=/scada/configs/frontend
      - BACKEND_CONFIG_PATH=/scada/configs/backend
      - RESTART_MQTT_TOPIC=com/config-sync/restart
    volumes:
      - D:\gw\configs\backend:/scada/configs/backend
      - D:\gw\configs\frontend:/scada/configs/frontend
      - D:\gw\configs\conf\config.yml:/scada/conf/config.yml
      - D:\gw\data\config-sync:/scada/data